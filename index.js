// Generated by CoffeeScript 1.10.0
(function() {
  var Beat, MAX_GLOBAL_HUE, MIN_GLOBAL_HUE, Nebula, ShootingStar, StarParticle, audioEl, fft, globalHue, globalHueModifier, jsonLoaded, r, renderBars, renderWaveform, scheduleBars, scheduleBeats, scheduleSections, selectSong, shootingStars, theBeat, triggerBeat,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MIN_GLOBAL_HUE = 210;

  MAX_GLOBAL_HUE = 290;

  audioEl = null;

  shootingStars = [];

  globalHue = MIN_GLOBAL_HUE;

  globalHueModifier = 4;

  fft = null;

  r = 1;

  StarParticle = (function() {
    function StarParticle() {
      this.draw = bind(this.draw, this);
    }

    StarParticle.prototype.draw = function(starX, starY) {
      var x, y;
      x = randomGaussian(starX, 4);
      y = randomGaussian(starY, 4);
      fill(color(230, 10, 95, 12));
      return ellipse(x, y, 1, 1);
    };

    return StarParticle;

  })();

  ShootingStar = (function() {
    function ShootingStar(maxAge) {
      this.kill = bind(this.kill, this);
      this.draw = bind(this.draw, this);
      var i, j;
      this.maxAge = maxAge * 1000;
      this.birth = Date.now();
      shootingStars.push(this);
      this.x = ~~(Math.random() * width) + (width / 10);
      this.y = -(~~(Math.random() * 100) + 20);
      this.velY = (Math.random() * 2) + 0.6;
      this.velX = -this.velY;
      this.alpha = 40;
      this.diameter = 9;
      this.starParticles = [];
      for (i = j = 1; j <= 50; i = ++j) {
        this.starParticles.push(new StarParticle());
      }
    }

    ShootingStar.prototype.draw = function() {
      var j, len, particle, ref, results;
      if (Date.now() - this.birth > this.maxAge) {
        this.alpha -= 1;
      }
      if (this.alpha === 0) {
        this.kill();
        return;
      }
      this.x += this.velX;
      this.y += this.velY;
      this.diameter -= 0.02;
      fill(color(230, 10, 95, this.alpha));
      noStroke();
      ellipse(this.x, this.y, this.diameter, this.diameter);
      ref = this.starParticles;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        results.push(particle.draw(this.x, this.y));
      }
      return results;
    };

    ShootingStar.prototype.kill = function() {
      this.starParticles = [];
      return shootingStars.splice(shootingStars.indexOf(this), 1);
    };

    return ShootingStar;

  })();

  Nebula = (function() {
    function Nebula() {}

    return Nebula;

  })();

  Beat = (function() {
    function Beat() {
      this.diameter = 60;
      this.decayRate = 1.3;
      this.extraRad = 1;
      this.radRate = 1;
      this.maxDiameter = Math.min(window.innerWidth, window.innerHeight) / 3;
      this.hue = 50;
    }

    Beat.prototype.triggerBeat = function() {
      this.extraRad = 20;
      this.radRate = 1.3;
      return this.hue = (this.hue + 5) % 360;
    };

    Beat.prototype.draw = function() {};

    return Beat;

  })();

  theBeat = new Beat();

  selectSong = function(e) {
    var json, mp3, src;
    src = e.target.getAttribute('data-src');
    mp3 = src + ".mp3";
    json = src + ".json";
    loadJSON(json, jsonLoaded);
    if (audioEl) {
      audioEl.stop();
    }
    audioEl = createAudio(mp3);
    return fft.setInput(audioEl);
  };

  triggerBeat = function() {
    return theBeat.triggerBeat();
  };

  renderWaveform = function(waveform) {
    var i, j, len, wave, x, y;
    noFill();
    beginShape();
    stroke(globalHue, 20, 32, 50);
    strokeJoin(ROUND);
    strokeCap(ROUND);
    strokeWeight(height / 55);
    for (i = j = 0, len = waveform.length; j < len; i = ++j) {
      wave = waveform[i];
      x = map(i, 0, waveform.length, 0, width + 60);
      y = map(wave, -1, 1, 0, height / 3);
      vertex(x, y + (height / 3));
    }
    return endShape();
  };

  renderBars = function(waveform) {
    var i, j, len, results, wave, x, x2, y, y2;
    stroke(globalHue, 40, 40);
    strokeWeight(height / 280);
    results = [];
    for (i = j = 0, len = waveform.length; j < len; i = ++j) {
      wave = waveform[i];
      x = map(i, 0, waveform.length, 0, width);
      y = (-(r + wave * 200)) * (wave * 1.2) + height / 2;
      x2 = x;
      y2 = (r + wave * 200) * (wave * 1.2) + height / 2;
      results.push(line(x, y, x2, y2));
    }
    return results;
  };

  scheduleBeats = function(beats) {
    var beat, j, len, results;
    results = [];
    for (j = 0, len = beats.length; j < len; j++) {
      beat = beats[j];
      results.push(audioEl.addCue(beat.start, function() {
        globalHue = globalHue + globalHueModifier;
        if (globalHue > MAX_GLOBAL_HUE || globalHue < MIN_GLOBAL_HUE) {
          return globalHueModifier = -globalHueModifier;
        }
      }));
    }
    return results;
  };

  scheduleBars = function(bars) {
    var bar, j, len, results;
    results = [];
    for (j = 0, len = bars.length; j < len; j++) {
      bar = bars[j];
      results.push(audioEl.addCue(bar.start, function() {
        var i, k, lum, results1;
        lum = map(globalHue, MIN_GLOBAL_HUE, MAX_GLOBAL_HUE, 12, 18);
        background(color(globalHue, 80, lum, 18));
        results1 = [];
        for (i = k = 0; k <= 1; i = ++k) {
          results1.push(new ShootingStar(bar.duration * 3));
        }
        return results1;
      }));
    }
    return results;
  };

  scheduleSections = function(sections) {
    var j, len, results, section;
    results = [];
    for (j = 0, len = sections.length; j < len; j++) {
      section = sections[j];
      results.push(audioEl.addCue(section.start, function() {
        return console.log('section', section);
      }));
    }
    return results;
  };

  jsonLoaded = function(json) {
    console.log('boom', json);
    scheduleBars(json.bars);
    scheduleBeats(json.beats);
    scheduleSections(json.sections);
    return audioEl.play();
  };

  window.setup = function() {
    var j, len, ref, results, song;
    background(2);
    fft = new p5.FFT(0.8, 128);
    angleMode(DEGREES);
    colorMode(HSB, 360, 100, 100, 100);
    createCanvas(windowWidth, windowHeight);
    ref = document.querySelectorAll('.song');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      song = ref[j];
      results.push(song.addEventListener('click', selectSong));
    }
    return results;
  };

  window.draw = function() {
    var j, len, lum, shootingStar, waveform;
    lum = map(globalHue, MIN_GLOBAL_HUE, MAX_GLOBAL_HUE, 12, 18);
    background(color(globalHue, 80, lum, 6));
    waveform = fft.waveform();
    renderWaveform(waveform);
    renderBars(waveform);
    theBeat.draw();
    for (j = 0, len = shootingStars.length; j < len; j++) {
      shootingStar = shootingStars[j];
      if (shootingStar != null) {
        shootingStar.draw();
      }
    }
    return null;
  };

}).call(this);
